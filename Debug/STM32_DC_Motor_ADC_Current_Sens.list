
STM32_DC_Motor_ADC_Current_Sens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c90  08005c90  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c90  08005c90  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c90  08005c90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013aa0  20000070  08005d08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013b10  08005d08  00023b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115ca  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002320  00000000  00000000  0003166a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00033990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00034ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027656  00000000  00000000  00035b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e00  00000000  00000000  0005d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b8d0  00000000  00000000  0006ef9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a86e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  0017a8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005c68 	.word	0x08005c68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08005c68 	.word	0x08005c68

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <AVR_Calculator>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void AVR_Calculator(void) {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < ADC_BUF_LEN; i++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e016      	b.n	8000bca <AVR_Calculator+0x3a>
		sum1 += adc1_buf[i];
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <AVR_Calculator+0x98>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <AVR_Calculator+0x9c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <AVR_Calculator+0x9c>)
 8000bae:	6013      	str	r3, [r2, #0]
		sum2 += adc2_buf[i];
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <AVR_Calculator+0xa0>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <AVR_Calculator+0xa4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <AVR_Calculator+0xa4>)
 8000bc2:	6013      	str	r3, [r2, #0]
	for (i = 0; i < ADC_BUF_LEN; i++) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	dde3      	ble.n	8000b9c <AVR_Calculator+0xc>
	}

	avr_data = (float)(sum1-sum2)/ADC_BUF_LEN;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <AVR_Calculator+0x9c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <AVR_Calculator+0xa4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	ee07 3a90 	vmov	s15, r3
 8000be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000c38 <AVR_Calculator+0xa8>
 8000bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <AVR_Calculator+0xac>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
	avr_vol_mV = avr_data/4096*3300;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <AVR_Calculator+0xac>)
 8000bf6:	ed93 7a00 	vldr	s14, [r3]
 8000bfa:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000c40 <AVR_Calculator+0xb0>
 8000bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c02:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c44 <AVR_Calculator+0xb4>
 8000c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <AVR_Calculator+0xb8>)
 8000c0c:	edc3 7a00 	vstr	s15, [r3]
	sum1 = 0;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <AVR_Calculator+0x9c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
	sum2 = 0;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <AVR_Calculator+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	20000274 	.word	0x20000274
 8000c2c:	20013b00 	.word	0x20013b00
 8000c30:	20005094 	.word	0x20005094
 8000c34:	20013b04 	.word	0x20013b04
 8000c38:	461c4000 	.word	0x461c4000
 8000c3c:	2000008c 	.word	0x2000008c
 8000c40:	45800000 	.word	0x45800000
 8000c44:	454e4000 	.word	0x454e4000
 8000c48:	20013afc 	.word	0x20013afc

08000c4c <RMS_Calculator>:
void RMS_Calculator(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	AVR_Calculator();
 8000c52:	f7ff ff9d 	bl	8000b90 <AVR_Calculator>
	int i;
	float sum;
	for (i = 0; i < ADC_BUF_LEN; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e024      	b.n	8000ca6 <RMS_Calculator+0x5a>
		sum += (float)(((int)data[i]-avr_data)*((int)data[i]-avr_data));
 8000c5c:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <RMS_Calculator+0xc0>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <RMS_Calculator+0xc4>)
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <RMS_Calculator+0xc0>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <RMS_Calculator+0xc4>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c94:	ed97 7a00 	vldr	s14, [r7]
 8000c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9c:	edc7 7a00 	vstr	s15, [r7]
	for (i = 0; i < ADC_BUF_LEN; i++) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cac:	4293      	cmp	r3, r2
 8000cae:	ddd5      	ble.n	8000c5c <RMS_Calculator+0x10>
	}
	rms_data = sqrt(sum/ADC_BUF_LEN);
 8000cb0:	edd7 7a00 	vldr	s15, [r7]
 8000cb4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000d14 <RMS_Calculator+0xc8>
 8000cb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000cbc:	ee16 0a90 	vmov	r0, s13
 8000cc0:	f7ff fc0e 	bl	80004e0 <__aeabi_f2d>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	ec43 2b10 	vmov	d0, r2, r3
 8000ccc:	f004 feee 	bl	8005aac <sqrt>
 8000cd0:	ec53 2b10 	vmov	r2, r3, d0
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff ff0a 	bl	8000af0 <__aeabi_d2f>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <RMS_Calculator+0xcc>)
 8000ce0:	6013      	str	r3, [r2, #0]
	rms_vol_mV = rms_data/4096*3300;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <RMS_Calculator+0xcc>)
 8000ce4:	ed93 7a00 	vldr	s14, [r3]
 8000ce8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d1c <RMS_Calculator+0xd0>
 8000cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000d20 <RMS_Calculator+0xd4>
 8000cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <RMS_Calculator+0xd8>)
 8000cfa:	edc3 7a00 	vstr	s15, [r3]
	sum = 0;
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20009eb4 	.word	0x20009eb4
 8000d10:	2000008c 	.word	0x2000008c
 8000d14:	461c4000 	.word	0x461c4000
 8000d18:	20013af4 	.word	0x20013af4
 8000d1c:	45800000 	.word	0x45800000
 8000d20:	454e4000 	.word	0x454e4000
 8000d24:	20013af8 	.word	0x20013af8

08000d28 <Overcurrent_Handler>:
void Overcurrent_Handler(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	if (rms_vol_mV > 9.5) {
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <Overcurrent_Handler+0x48>)
 8000d2e:	edd3 7a00 	vldr	s15, [r3]
 8000d32:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3e:	dc00      	bgt.n	8000d42 <Overcurrent_Handler+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		HAL_Delay(4000);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		HAL_Delay(3000);
	}
}
 8000d40:	e013      	b.n	8000d6a <Overcurrent_Handler+0x42>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f002 fd47 	bl	80037dc <HAL_GPIO_TogglePin>
		HAL_Delay(4000);
 8000d4e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000d52:	f000 fccb 	bl	80016ec <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f002 fd3d 	bl	80037dc <HAL_GPIO_TogglePin>
		HAL_Delay(3000);
 8000d62:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d66:	f000 fcc1 	bl	80016ec <HAL_Delay>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20013af8 	.word	0x20013af8

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 fc47 	bl	800160a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f82c 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 f9fc 	bl	800117c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d84:	f000 f9c8 	bl	8001118 <MX_DMA_Init>
  MX_TIM3_Init();
 8000d88:	f000 f950 	bl	800102c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d8c:	f000 f870 	bl	8000e70 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d90:	f000 f8e6 	bl	8000f60 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <main+0x50>)
 8000d98:	f003 fdf0 	bl	800497c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc1_buf, ADC_BUF_LEN);
 8000d9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000da0:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <main+0x54>)
 8000da2:	480a      	ldr	r0, [pc, #40]	; (8000dcc <main+0x58>)
 8000da4:	f001 f8a8 	bl	8001ef8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint16_t*)adc2_buf, ADC_BUF_LEN);
 8000da8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dac:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <main+0x5c>)
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <main+0x60>)
 8000db0:	f001 f8a2 	bl	8001ef8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RMS_Calculator();
 8000db4:	f7ff ff4a 	bl	8000c4c <RMS_Calculator>
	  Overcurrent_Handler();
 8000db8:	f7ff ffb6 	bl	8000d28 <Overcurrent_Handler>
	  HAL_Delay(20);
 8000dbc:	2014      	movs	r0, #20
 8000dbe:	f000 fc95 	bl	80016ec <HAL_Delay>
	  RMS_Calculator();
 8000dc2:	e7f7      	b.n	8000db4 <main+0x40>
 8000dc4:	20000228 	.word	0x20000228
 8000dc8:	20000274 	.word	0x20000274
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	20005094 	.word	0x20005094
 8000dd4:	200000fc 	.word	0x200000fc

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	2238      	movs	r2, #56	; 0x38
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fe58 	bl	8005a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dfe:	f002 fd07 	bl	8003810 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	2340      	movs	r3, #64	; 0x40
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 fda1 	bl	8003978 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e3c:	f000 f9ea 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2303      	movs	r3, #3
 8000e46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2101      	movs	r1, #1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 f8a5 	bl	8003fa8 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e64:	f000 f9d6 	bl	8001214 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3750      	adds	r7, #80	; 0x50
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fe07 	bl	8005a9c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e8e:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000e90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000e98:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4817      	ldr	r0, [pc, #92]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000efa:	f000 fe3b 	bl	8001b74 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f04:	f000 f986 	bl	8001214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000f14:	f001 fe3e 	bl	8002b94 <HAL_ADCEx_MultiModeConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f1e:	f000 f979 	bl	8001214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_ADC1_Init+0xec>)
 8000f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f26:	2306      	movs	r3, #6
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f2e:	237f      	movs	r3, #127	; 0x7f
 8000f30:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f32:	2304      	movs	r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_ADC1_Init+0xe8>)
 8000f40:	f001 f8cc 	bl	80020dc <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f4a:	f000 f963 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3730      	adds	r7, #48	; 0x30
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000090 	.word	0x20000090
 8000f5c:	04300002 	.word	0x04300002

08000f60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2220      	movs	r2, #32
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fd95 	bl	8005a9c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000f74:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <MX_ADC2_Init+0xc4>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000f7a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000f7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f92:	4b23      	ldr	r3, [pc, #140]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_ADC2_Init+0xc0>)
 8000fdc:	f000 fdca 	bl	8001b74 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000fe6:	f000 f915 	bl	8001214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_ADC2_Init+0xc8>)
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff6:	237f      	movs	r3, #127	; 0x7f
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_ADC2_Init+0xc0>)
 8001008:	f001 f868 	bl	80020dc <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001012:	f000 f8ff 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000fc 	.word	0x200000fc
 8001024:	50000100 	.word	0x50000100
 8001028:	08600004 	.word	0x08600004

0800102c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <MX_TIM3_Init+0xe4>)
 8001060:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <MX_TIM3_Init+0xe8>)
 8001062:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_TIM3_Init+0xe4>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <MX_TIM3_Init+0xe4>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_TIM3_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <MX_TIM3_Init+0xe4>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_TIM3_Init+0xe4>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001082:	4823      	ldr	r0, [pc, #140]	; (8001110 <MX_TIM3_Init+0xe4>)
 8001084:	f003 fbc2 	bl	800480c <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800108e:	f000 f8c1 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	4619      	mov	r1, r3
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <MX_TIM3_Init+0xe4>)
 80010a0:	f003 fe92 	bl	8004dc8 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010aa:	f000 f8b3 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010ae:	4818      	ldr	r0, [pc, #96]	; (8001110 <MX_TIM3_Init+0xe4>)
 80010b0:	f003 fc03 	bl	80048ba <HAL_TIM_PWM_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010ba:	f000 f8ab 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <MX_TIM3_Init+0xe4>)
 80010ce:	f004 fc25 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010d8:	f000 f89c 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010dc:	2360      	movs	r3, #96	; 0x60
 80010de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM3_Init+0xe4>)
 80010f4:	f003 fd54 	bl	8004ba0 <HAL_TIM_PWM_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010fe:	f000 f889 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM3_Init+0xe4>)
 8001104:	f000 f9d2 	bl	80014ac <HAL_TIM_MspPostInit>

}
 8001108:	bf00      	nop
 800110a:	3738      	adds	r7, #56	; 0x38
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000228 	.word	0x20000228
 8001114:	40000400 	.word	0x40000400

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_DMA_Init+0x60>)
 8001120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <MX_DMA_Init+0x60>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6493      	str	r3, [r2, #72]	; 0x48
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_DMA_Init+0x60>)
 800112c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_DMA_Init+0x60>)
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <MX_DMA_Init+0x60>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6493      	str	r3, [r2, #72]	; 0x48
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_DMA_Init+0x60>)
 8001144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	200b      	movs	r0, #11
 8001154:	f001 ff01 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001158:	200b      	movs	r0, #11
 800115a:	f001 ff18 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	200c      	movs	r0, #12
 8001164:	f001 fef9 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001168:	200c      	movs	r0, #12
 800116a:	f001 ff10 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_GPIO_Init+0x94>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <MX_GPIO_Init+0x94>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_GPIO_Init+0x94>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_GPIO_Init+0x94>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <MX_GPIO_Init+0x94>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_GPIO_Init+0x94>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_GPIO_Init+0x94>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_GPIO_Init+0x94>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_GPIO_Init+0x94>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f002 fae2 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f002 f950 	bl	80034a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_MspInit+0x44>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6613      	str	r3, [r2, #96]	; 0x60
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_MspInit+0x44>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x44>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6593      	str	r3, [r2, #88]	; 0x58
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x44>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001256:	f002 fb7f 	bl	8003958 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0a0      	sub	sp, #128	; 0x80
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	2254      	movs	r2, #84	; 0x54
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fc07 	bl	8005a9c <memset>
  if(hadc->Instance==ADC1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001296:	d169      	bne.n	800136c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800129e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 f861 	bl	8004370 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012b4:	f7ff ffae 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012b8:	4b65      	ldr	r3, [pc, #404]	; (8001450 <HAL_ADC_MspInit+0x1e8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a64      	ldr	r2, [pc, #400]	; (8001450 <HAL_ADC_MspInit+0x1e8>)
 80012c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <HAL_ADC_MspInit+0x1e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10b      	bne.n	80012e2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a61      	ldr	r2, [pc, #388]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a5b      	ldr	r2, [pc, #364]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b59      	ldr	r3, [pc, #356]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fa:	2301      	movs	r3, #1
 80012fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001310:	f002 f8ca 	bl	80034a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001316:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_ADC_MspInit+0x1f4>)
 8001318:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 800131c:	2205      	movs	r2, #5
 800131e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001342:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001344:	2220      	movs	r2, #32
 8001346:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001348:	4b43      	ldr	r3, [pc, #268]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800134e:	4842      	ldr	r0, [pc, #264]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001350:	f001 fe38 	bl	8002fc4 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800135a:	f7ff ff5b 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a3d      	ldr	r2, [pc, #244]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001362:	655a      	str	r2, [r3, #84]	; 0x54
 8001364:	4a3c      	ldr	r2, [pc, #240]	; (8001458 <HAL_ADC_MspInit+0x1f0>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800136a:	e06d      	b.n	8001448 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a3b      	ldr	r2, [pc, #236]	; (8001460 <HAL_ADC_MspInit+0x1f8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d168      	bne.n	8001448 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800137a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800137c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001380:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fff2 	bl	8004370 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8001392:	f7ff ff3f 	bl	8001214 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_ADC_MspInit+0x1e8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <HAL_ADC_MspInit+0x1e8>)
 800139e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_ADC_MspInit+0x1e8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80013ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	4a23      	ldr	r2, [pc, #140]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_ADC_MspInit+0x1ec>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d8:	2302      	movs	r3, #2
 80013da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013dc:	2303      	movs	r3, #3
 80013de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f002 f85b 	bl	80034a8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 80013f4:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <HAL_ADC_MspInit+0x200>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 8001412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001416:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 800141a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 8001422:	2220      	movs	r2, #32
 8001424:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 800142e:	f001 fdc9 	bl	8002fc4 <HAL_DMA_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8001438:	f7ff feec 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_ADC_MspInit+0x1fc>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001448:	bf00      	nop
 800144a:	3780      	adds	r7, #128	; 0x80
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20013b08 	.word	0x20013b08
 8001454:	40021000 	.word	0x40021000
 8001458:	20000168 	.word	0x20000168
 800145c:	40020008 	.word	0x40020008
 8001460:	50000100 	.word	0x50000100
 8001464:	200001c8 	.word	0x200001c8
 8001468:	4002001c 	.word	0x4002001c

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_TIM_Base_MspInit+0x38>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10b      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_TIM_MspPostInit+0x64>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d11c      	bne.n	8001508 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_TIM_MspPostInit+0x68>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_TIM_MspPostInit+0x68>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_TIM_MspPostInit+0x68>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f001 ffd0 	bl	80034a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40000400 	.word	0x40000400
 8001514:	40021000 	.word	0x40021000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f8a4 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <DMA1_Channel1_IRQHandler+0x10>)
 8001572:	f001 fe4a 	bl	800320a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000168 	.word	0x20000168

08001580 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA1_Channel2_IRQHandler+0x10>)
 8001586:	f001 fe40 	bl	800320a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001c8 	.word	0x200001c8

08001594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0b      	ldr	r4, [pc, #44]	; (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e2:	f7ff ffd7 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f004 fa35 	bl	8005a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff fbc3 	bl	8000d74 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   r0, =_estack
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015fc:	08005c98 	.word	0x08005c98
  ldr r2, =_sbss
 8001600:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001604:	20013b10 	.word	0x20013b10

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>

0800160a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f001 fc95 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f80e 	bl	800163c <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e001      	b.n	8001630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162c:	f7ff fdf8 	bl	8001220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001630:	79fb      	ldrb	r3, [r7, #7]

}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_InitTick+0x68>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d022      	beq.n	8001696 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_InitTick+0x6c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_InitTick+0x68>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800165c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fca0 	bl	8002faa <HAL_SYSTICK_Config>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	d809      	bhi.n	800168a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001676:	2200      	movs	r2, #0
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	f001 fc6c 	bl	8002f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_InitTick+0x70>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e007      	b.n	800169a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e004      	b.n	800169a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e001      	b.n	800169a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	4a03      	ldr	r2, [pc, #12]	; (80016cc <HAL_IncTick+0x1c>)
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20013b0c 	.word	0x20013b0c
 80016d0:	20000008 	.word	0x20000008

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20013b0c 	.word	0x20013b0c

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff ffee 	bl	80016d4 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d004      	beq.n	8001710 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_Delay+0x40>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001710:	bf00      	nop
 8001712:	f7ff ffdf 	bl	80016d4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	429a      	cmp	r2, r3
 8001720:	d8f7      	bhi.n	8001712 <HAL_Delay+0x26>
  {
  }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000008 	.word	0x20000008

08001730 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	609a      	str	r2, [r3, #8]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3360      	adds	r3, #96	; 0x60
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <LL_ADC_SetOffset+0x44>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	4313      	orrs	r3, r2
 80017c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017d0:	bf00      	nop
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	03fff000 	.word	0x03fff000

080017e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3360      	adds	r3, #96	; 0x60
 80017ee:	461a      	mov	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3360      	adds	r3, #96	; 0x60
 800181c:	461a      	mov	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	431a      	orrs	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001836:	bf00      	nop
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001842:	b480      	push	{r7}
 8001844:	b087      	sub	sp, #28
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3360      	adds	r3, #96	; 0x60
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3360      	adds	r3, #96	; 0x60
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	615a      	str	r2, [r3, #20]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b087      	sub	sp, #28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3330      	adds	r3, #48	; 0x30
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	4413      	add	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	211f      	movs	r1, #31
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 011f 	and.w	r1, r3, #31
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001952:	b480      	push	{r7}
 8001954:	b087      	sub	sp, #28
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3314      	adds	r3, #20
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	0e5b      	lsrs	r3, r3, #25
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0d1b      	lsrs	r3, r3, #20
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2107      	movs	r1, #7
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	401a      	ands	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	0d1b      	lsrs	r3, r3, #20
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d10a      	bne.n	80019d2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c8:	431a      	orrs	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80019d0:	e00a      	b.n	80019e8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	407f0000 	.word	0x407f0000

080019f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 031f 	and.w	r3, r3, #31
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6093      	str	r3, [r2, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a4c:	d101      	bne.n	8001a52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a9c:	d101      	bne.n	8001aa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <LL_ADC_IsEnabled+0x18>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <LL_ADC_IsEnabled+0x1a>
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b12:	f043 0204 	orr.w	r2, r3, #4
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d101      	bne.n	8001b64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1af      	b.n	8001eee <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fb63 	bl	8001268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff3f 	bl	8001a38 <LL_ADC_IsDeepPowerDownEnabled>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff25 	bl	8001a14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff5a 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff3e 	bl	8001a60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001be4:	4b9f      	ldr	r3, [pc, #636]	; (8001e64 <HAL_ADC_Init+0x2f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	4a9f      	ldr	r2, [pc, #636]	; (8001e68 <HAL_ADC_Init+0x2f4>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f9      	bne.n	8001bfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff3c 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	f043 0210 	orr.w	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff75 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8001c3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 8148 	bne.w	8001edc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 8144 	bne.w	8001edc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff35 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d141      	bne.n	8001cf8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c7c:	d004      	beq.n	8001c88 <HAL_ADC_Init+0x114>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <HAL_ADC_Init+0x2f8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10f      	bne.n	8001ca8 <HAL_ADC_Init+0x134>
 8001c88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c8c:	f7ff ff24 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001c90:	4604      	mov	r4, r0
 8001c92:	4876      	ldr	r0, [pc, #472]	; (8001e6c <HAL_ADC_Init+0x2f8>)
 8001c94:	f7ff ff20 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4323      	orrs	r3, r4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e012      	b.n	8001cce <HAL_ADC_Init+0x15a>
 8001ca8:	4871      	ldr	r0, [pc, #452]	; (8001e70 <HAL_ADC_Init+0x2fc>)
 8001caa:	f7ff ff15 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4870      	ldr	r0, [pc, #448]	; (8001e74 <HAL_ADC_Init+0x300>)
 8001cb2:	f7ff ff11 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	431c      	orrs	r4, r3
 8001cba:	486f      	ldr	r0, [pc, #444]	; (8001e78 <HAL_ADC_Init+0x304>)
 8001cbc:	f7ff ff0c 	bl	8001ad8 <LL_ADC_IsEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d012      	beq.n	8001cf8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Init+0x172>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a62      	ldr	r2, [pc, #392]	; (8001e6c <HAL_ADC_Init+0x2f8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Init+0x176>
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_ADC_Init+0x308>)
 8001ce8:	e000      	b.n	8001cec <HAL_ADC_Init+0x178>
 8001cea:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_ADC_Init+0x30c>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f7ff fd1c 	bl	8001730 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7f5b      	ldrb	r3, [r3, #29]
 8001cfc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d106      	bne.n	8001d34 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	045b      	lsls	r3, r3, #17
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <HAL_ADC_Init+0x310>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fed1 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8001d84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fede 	bl	8001b4c <LL_ADC_INJ_IsConversionOngoing>
 8001d90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d17f      	bne.n	8001e98 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d17c      	bne.n	8001e98 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001daa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dba:	f023 0302 	bic.w	r3, r3, #2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d017      	beq.n	8001e00 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001dde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001de8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6911      	ldr	r1, [r2, #16]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001dfe:	e013      	b.n	8001e28 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d12a      	bne.n	8001e88 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e54:	430a      	orrs	r2, r1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	e019      	b.n	8001e98 <HAL_ADC_Init+0x324>
 8001e64:	20000000 	.word	0x20000000
 8001e68:	053e2d63 	.word	0x053e2d63
 8001e6c:	50000100 	.word	0x50000100
 8001e70:	50000400 	.word	0x50000400
 8001e74:	50000500 	.word	0x50000500
 8001e78:	50000600 	.word	0x50000600
 8001e7c:	50000300 	.word	0x50000300
 8001e80:	50000700 	.word	0x50000700
 8001e84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10c      	bne.n	8001eba <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f023 010f 	bic.w	r1, r3, #15
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb8:	e007      	b.n	8001eca <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 020f 	bic.w	r2, r2, #15
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eda:	e007      	b.n	8001eec <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	f043 0210 	orr.w	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	bf00      	nop

08001ef8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_Start_DMA+0x20>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_ADC_Start_DMA+0x184>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_Start_DMA+0x24>
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_ADC_Start_DMA+0x188>)
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_Start_DMA+0x26>
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_ADC_Start_DMA+0x18c>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fd6a 	bl	80019f8 <LL_ADC_GetMultimode>
 8001f24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fdfb 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 809b 	bne.w	800206e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Start_DMA+0x4e>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e096      	b.n	8002074 <HAL_ADC_Start_DMA+0x17c>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <HAL_ADC_Start_DMA+0x190>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d008      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d002      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	d17a      	bne.n	8002060 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fcf6 	bl	800295c <ADC_Enable>
 8001f70:	4603      	mov	r3, r0
 8001f72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d16d      	bne.n	8002056 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3a      	ldr	r2, [pc, #232]	; (800207c <HAL_ADC_Start_DMA+0x184>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_ADC_Start_DMA+0xb4>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3b      	ldr	r2, [pc, #236]	; (800208c <HAL_ADC_Start_DMA+0x194>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d002      	beq.n	8001fa8 <HAL_ADC_Start_DMA+0xb0>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e003      	b.n	8001fb0 <HAL_ADC_Start_DMA+0xb8>
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_ADC_Start_DMA+0x198>)
 8001faa:	e001      	b.n	8001fb0 <HAL_ADC_Start_DMA+0xb8>
 8001fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d002      	beq.n	8001fbe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f023 0206 	bic.w	r2, r3, #6
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	661a      	str	r2, [r3, #96]	; 0x60
 8001fe2:	e002      	b.n	8001fea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_ADC_Start_DMA+0x19c>)
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_ADC_Start_DMA+0x1a0>)
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_ADC_Start_DMA+0x1a4>)
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	221c      	movs	r2, #28
 8002008:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0210 	orr.w	r2, r2, #16
 8002020:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3340      	adds	r3, #64	; 0x40
 800203c:	4619      	mov	r1, r3
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f001 f867 	bl	8003114 <HAL_DMA_Start_IT>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fd55 	bl	8001afe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002054:	e00d      	b.n	8002072 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800205e:	e008      	b.n	8002072 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800206c:	e001      	b.n	8002072 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	50000100 	.word	0x50000100
 8002080:	50000300 	.word	0x50000300
 8002084:	50000700 	.word	0x50000700
 8002088:	50000600 	.word	0x50000600
 800208c:	50000500 	.word	0x50000500
 8002090:	50000400 	.word	0x50000400
 8002094:	08002a21 	.word	0x08002a21
 8002098:	08002af9 	.word	0x08002af9
 800209c:	08002b15 	.word	0x08002b15

080020a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0b6      	sub	sp, #216	; 0xd8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x24>
 80020fa:	2302      	movs	r3, #2
 80020fc:	f000 bc13 	b.w	8002926 <HAL_ADC_ConfigChannel+0x84a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fd0a 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 83f3 	bne.w	8002900 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff fbe7 	bl	80018fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fcf8 	bl	8001b26 <LL_ADC_REG_IsConversionOngoing>
 8002136:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd04 	bl	8001b4c <LL_ADC_INJ_IsConversionOngoing>
 8002144:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002148:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 81d9 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 81d4 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002164:	d10f      	bne.n	8002186 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	4619      	mov	r1, r3
 8002172:	f7ff fbee 	bl	8001952 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fb95 	bl	80018ae <LL_ADC_SetSamplingTimeCommonConfig>
 8002184:	e00e      	b.n	80021a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff fbdd 	bl	8001952 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fb85 	bl	80018ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d022      	beq.n	800220c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021d6:	f7ff fadf 	bl	8001798 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f7ff fb2b 	bl	8001842 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7f1b      	ldrb	r3, [r3, #28]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x126>
 80021fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002200:	e000      	b.n	8002204 <HAL_ADC_ConfigChannel+0x128>
 8002202:	2300      	movs	r3, #0
 8002204:	461a      	mov	r2, r3
 8002206:	f7ff fb37 	bl	8001878 <LL_ADC_SetOffsetSaturation>
 800220a:	e17b      	b.n	8002504 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fae4 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x15c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fad9 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	e01e      	b.n	8002276 <HAL_ADC_ConfigChannel+0x19a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff face 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800225a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800225e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e004      	b.n	8002274 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800226a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_ADC_ConfigChannel+0x1b2>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	e018      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x1e4>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e004      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fa9d 	bl	800180c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa81 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x222>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa76 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	e01e      	b.n	800233c <HAL_ADC_ConfigChannel+0x260>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fa6b 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800231c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e004      	b.n	800233a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x278>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	e018      	b.n	8002386 <HAL_ADC_ConfigChannel+0x2aa>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002368:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800236c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800237c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fa3a 	bl	800180c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa1e 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x2e8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa13 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x326>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2102      	movs	r1, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fa08 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80023f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x33e>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e016      	b.n	8002448 <HAL_ADC_ConfigChannel+0x36c>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800242c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800243a:	2320      	movs	r3, #32
 800243c:	e004      	b.n	8002448 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800243e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002448:	429a      	cmp	r2, r3
 800244a:	d106      	bne.n	800245a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	2102      	movs	r1, #2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff f9d9 	bl	800180c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2103      	movs	r1, #3
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f9bd 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x3aa>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2103      	movs	r1, #3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f9b2 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	0e9b      	lsrs	r3, r3, #26
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	e017      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x3da>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2103      	movs	r1, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f9a7 	bl	80017e0 <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800249e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x3f2>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	e011      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x416>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d106      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2103      	movs	r1, #3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f984 	bl	800180c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fae5 	bl	8001ad8 <LL_ADC_IsEnabled>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 813d 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff fa40 	bl	80019a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4aa2      	ldr	r2, [pc, #648]	; (80027b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f040 812e 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_ADC_ConfigChannel+0x480>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2b09      	cmp	r3, #9
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e019      	b.n	8002590 <HAL_ADC_ConfigChannel+0x4b4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800256a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800256e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2b09      	cmp	r3, #9
 8002588:	bf94      	ite	ls
 800258a:	2301      	movls	r3, #1
 800258c:	2300      	movhi	r3, #0
 800258e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002590:	2b00      	cmp	r3, #0
 8002592:	d079      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x4d4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	3301      	adds	r3, #1
 80025a8:	069b      	lsls	r3, r3, #26
 80025aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ae:	e015      	b.n	80025dc <HAL_ADC_ConfigChannel+0x500>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e003      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80025cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	069b      	lsls	r3, r3, #26
 80025d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x520>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	e017      	b.n	800262c <HAL_ADC_ConfigChannel+0x550>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800260a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800260e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	ea42 0103 	orr.w	r1, r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x576>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	3301      	adds	r3, #1
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	e018      	b.n	8002684 <HAL_ADC_ConfigChannel+0x5a8>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002684:	430b      	orrs	r3, r1
 8002686:	e07e      	b.n	8002786 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x5c8>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a2:	e015      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x5f4>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	069b      	lsls	r3, r3, #26
 80026cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x614>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	e017      	b.n	8002720 <HAL_ADC_ConfigChannel+0x644>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	61fb      	str	r3, [r7, #28]
  return result;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	ea42 0103 	orr.w	r1, r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_ADC_ConfigChannel+0x670>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	3b1e      	subs	r3, #30
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274a:	e01b      	b.n	8002784 <HAL_ADC_ConfigChannel+0x6a8>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	613b      	str	r3, [r7, #16]
  return result;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e003      	b.n	8002770 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f003 021f 	and.w	r2, r3, #31
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3b1e      	subs	r3, #30
 800277e:	051b      	lsls	r3, r3, #20
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002784:	430b      	orrs	r3, r1
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	4619      	mov	r1, r3
 800278c:	f7ff f8e1 	bl	8001952 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_ADC_ConfigChannel+0x6e0>)
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80be 	beq.w	800291a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x6d6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x6ec>
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80027b4:	e009      	b.n	80027ca <HAL_ADC_ConfigChannel+0x6ee>
 80027b6:	bf00      	nop
 80027b8:	407f0000 	.word	0x407f0000
 80027bc:	80080000 	.word	0x80080000
 80027c0:	50000100 	.word	0x50000100
 80027c4:	50000300 	.word	0x50000300
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe ffd6 	bl	800177c <LL_ADC_GetCommonPathInternalCh>
 80027d0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_ADC_ConfigChannel+0x858>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x70c>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_ADC_ConfigChannel+0x85c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d13a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d134      	bne.n	800285e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fc:	d005      	beq.n	800280a <HAL_ADC_ConfigChannel+0x72e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4e      	ldr	r2, [pc, #312]	; (800293c <HAL_ADC_ConfigChannel+0x860>)
 8002804:	4293      	cmp	r3, r2
 8002806:	f040 8085 	bne.w	8002914 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002812:	d004      	beq.n	800281e <HAL_ADC_ConfigChannel+0x742>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a49      	ldr	r2, [pc, #292]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x746>
 800281e:	4a49      	ldr	r2, [pc, #292]	; (8002944 <HAL_ADC_ConfigChannel+0x868>)
 8002820:	e000      	b.n	8002824 <HAL_ADC_ConfigChannel+0x748>
 8002822:	4a43      	ldr	r2, [pc, #268]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7fe ff91 	bl	8001756 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002834:	4b44      	ldr	r3, [pc, #272]	; (8002948 <HAL_ADC_ConfigChannel+0x86c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	4a44      	ldr	r2, [pc, #272]	; (800294c <HAL_ADC_ConfigChannel+0x870>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800284e:	e002      	b.n	8002856 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3b01      	subs	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800285c:	e05a      	b.n	8002914 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3b      	ldr	r2, [pc, #236]	; (8002950 <HAL_ADC_ConfigChannel+0x874>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d125      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x7d8>
 8002868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800286c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11f      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a31      	ldr	r2, [pc, #196]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d104      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x7ac>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_ADC_ConfigChannel+0x878>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d047      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002890:	d004      	beq.n	800289c <HAL_ADC_ConfigChannel+0x7c0>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x7c4>
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <HAL_ADC_ConfigChannel+0x868>)
 800289e:	e000      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x7c6>
 80028a0:	4a23      	ldr	r2, [pc, #140]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 80028a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f7fe ff52 	bl	8001756 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b2:	e031      	b.n	8002918 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a27      	ldr	r2, [pc, #156]	; (8002958 <HAL_ADC_ConfigChannel+0x87c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12d      	bne.n	800291a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d127      	bne.n	800291a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x80c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_ADC_ConfigChannel+0x864>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x810>
 80028e8:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_ADC_ConfigChannel+0x868>)
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x812>
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_ADC_ConfigChannel+0x854>)
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f7fe ff2c 	bl	8001756 <LL_ADC_SetCommonPathInternalCh>
 80028fe:	e00c      	b.n	800291a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002912:	e002      	b.n	800291a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002922:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002926:	4618      	mov	r0, r3
 8002928:	37d8      	adds	r7, #216	; 0xd8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	50000700 	.word	0x50000700
 8002934:	c3210000 	.word	0xc3210000
 8002938:	90c00010 	.word	0x90c00010
 800293c:	50000600 	.word	0x50000600
 8002940:	50000100 	.word	0x50000100
 8002944:	50000300 	.word	0x50000300
 8002948:	20000000 	.word	0x20000000
 800294c:	053e2d63 	.word	0x053e2d63
 8002950:	c7520000 	.word	0xc7520000
 8002954:	50000500 	.word	0x50000500
 8002958:	cb840000 	.word	0xcb840000

0800295c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f8b5 	bl	8001ad8 <LL_ADC_IsEnabled>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d14d      	bne.n	8002a10 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <ADC_Enable+0xc0>)
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e039      	b.n	8002a12 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f884 	bl	8001ab0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fe94 	bl	80016d4 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ae:	e028      	b.n	8002a02 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f88f 	bl	8001ad8 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f873 	bl	8001ab0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ca:	f7fe fe83 	bl	80016d4 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d914      	bls.n	8002a02 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d00d      	beq.n	8002a02 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e007      	b.n	8002a12 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d1cf      	bne.n	80029b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	8000003f 	.word	0x8000003f

08002a20 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d14b      	bne.n	8002ad2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d021      	beq.n	8002a98 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe ff3b 	bl	80018d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d032      	beq.n	8002aca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12b      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11f      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a96:	e018      	b.n	8002aca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d111      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fae8 	bl	80020a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ad0:	e00e      	b.n	8002af0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff faf2 	bl	80020c8 <HAL_ADC_ErrorCallback>
}
 8002ae4:	e004      	b.n	8002af0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f7ff fad4 	bl	80020b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	f043 0204 	orr.w	r2, r3, #4
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff fac4 	bl	80020c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <LL_ADC_IsEnabled>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <LL_ADC_IsEnabled+0x18>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <LL_ADC_IsEnabled+0x1a>
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b0a1      	sub	sp, #132	; 0x84
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0e7      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bca:	d102      	bne.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e009      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002bdc:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	e001      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0be      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ffb1 	bl	8002b6e <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffab 	bl	8002b6e <LL_ADC_REG_IsConversionOngoing>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 80a0 	bne.w	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 809c 	bne.w	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c30:	d004      	beq.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a55      	ldr	r2, [pc, #340]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c3c:	4b56      	ldr	r3, [pc, #344]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002c3e:	e000      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c40:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002c42:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d04b      	beq.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c5e:	035b      	lsls	r3, r3, #13
 8002c60:	430b      	orrs	r3, r1
 8002c62:	431a      	orrs	r2, r3
 8002c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c70:	d004      	beq.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a45      	ldr	r2, [pc, #276]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10f      	bne.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c80:	f7ff ff62 	bl	8002b48 <LL_ADC_IsEnabled>
 8002c84:	4604      	mov	r4, r0
 8002c86:	4841      	ldr	r0, [pc, #260]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c88:	f7ff ff5e 	bl	8002b48 <LL_ADC_IsEnabled>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e012      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c9c:	483c      	ldr	r0, [pc, #240]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c9e:	f7ff ff53 	bl	8002b48 <LL_ADC_IsEnabled>
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	483b      	ldr	r0, [pc, #236]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ca6:	f7ff ff4f 	bl	8002b48 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	431c      	orrs	r4, r3
 8002cae:	483c      	ldr	r0, [pc, #240]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cb0:	f7ff ff4a 	bl	8002b48 <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d056      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cce:	f023 030f 	bic.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	6811      	ldr	r1, [r2, #0]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce2:	e047      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10f      	bne.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002d04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d08:	f7ff ff1e 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	481f      	ldr	r0, [pc, #124]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d10:	f7ff ff1a 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4323      	orrs	r3, r4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e012      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d24:	481a      	ldr	r0, [pc, #104]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d26:	f7ff ff0f 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4819      	ldr	r0, [pc, #100]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d2e:	f7ff ff0b 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	431c      	orrs	r4, r3
 8002d36:	481a      	ldr	r0, [pc, #104]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d38:	f7ff ff06 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d56:	f023 030f 	bic.w	r3, r3, #15
 8002d5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5e:	e009      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d72:	e000      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3784      	adds	r7, #132	; 0x84
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	50000100 	.word	0x50000100
 8002d90:	50000400 	.word	0x50000400
 8002d94:	50000500 	.word	0x50000500
 8002d98:	50000300 	.word	0x50000300
 8002d9c:	50000700 	.word	0x50000700
 8002da0:	50000600 	.word	0x50000600

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff40 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff33 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa4 	bl	8002f00 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e08d      	b.n	80030f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_DMA_Init+0x138>)
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d80f      	bhi.n	8003002 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b45      	ldr	r3, [pc, #276]	; (8003100 <HAL_DMA_Init+0x13c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	4a45      	ldr	r2, [pc, #276]	; (8003104 <HAL_DMA_Init+0x140>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	009a      	lsls	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_DMA_Init+0x144>)
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
 8003000:	e00e      	b.n	8003020 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_DMA_Init+0x148>)
 800300a:	4413      	add	r3, r2
 800300c:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <HAL_DMA_Init+0x140>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <HAL_DMA_Init+0x14c>)
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9b6 	bl	80033e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003080:	d102      	bne.n	8003088 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800309c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_DMA_Init+0x104>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d80c      	bhi.n	80030c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9d6 	bl	8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	e008      	b.n	80030da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020407 	.word	0x40020407
 8003100:	bffdfff8 	.word	0xbffdfff8
 8003104:	cccccccd 	.word	0xcccccccd
 8003108:	40020000 	.word	0x40020000
 800310c:	bffdfbf8 	.word	0xbffdfbf8
 8003110:	40020400 	.word	0x40020400

08003114 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Start_IT+0x20>
 8003130:	2302      	movs	r3, #2
 8003132:	e066      	b.n	8003202 <HAL_DMA_Start_IT+0xee>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d155      	bne.n	80031f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8fb 	bl	8003368 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 020e 	orr.w	r2, r2, #14
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e00f      	b.n	80031ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 020a 	orr.w	r2, r2, #10
 80031aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e005      	b.n	8003200 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2204      	movs	r2, #4
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d026      	beq.n	8003284 <HAL_DMA_IRQHandler+0x7a>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d021      	beq.n	8003284 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0204 	bic.w	r2, r2, #4
 800325c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2104      	movs	r1, #4
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	2b00      	cmp	r3, #0
 8003278:	d071      	beq.n	800335e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003282:	e06c      	b.n	800335e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2202      	movs	r2, #2
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d02e      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d029      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 020a 	bic.w	r2, r2, #10
 80032be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2102      	movs	r1, #2
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d038      	beq.n	800335e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032f4:	e033      	b.n	800335e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2208      	movs	r2, #8
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02a      	beq.n	8003360 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d025      	beq.n	8003360 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 020e 	bic.w	r2, r2, #14
 8003322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800335e:	bf00      	nop
 8003360:	bf00      	nop
}
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800337e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003390:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 021f 	and.w	r2, r3, #31
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d108      	bne.n	80033c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033c6:	e007      	b.n	80033d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d802      	bhi.n	80033fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	e001      	b.n	8003402 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003400:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3b08      	subs	r3, #8
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	009a      	lsls	r2, r3, #2
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a0b      	ldr	r2, [pc, #44]	; (800345c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800342e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	409a      	lsls	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40020407 	.word	0x40020407
 8003450:	40020800 	.word	0x40020800
 8003454:	40020820 	.word	0x40020820
 8003458:	cccccccd 	.word	0xcccccccd
 800345c:	40020880 	.word	0x40020880

08003460 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003482:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3b01      	subs	r3, #1
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2201      	movs	r2, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	1000823f 	.word	0x1000823f
 80034a4:	40020940 	.word	0x40020940

080034a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034b6:	e15a      	b.n	800376e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	4013      	ands	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 814c 	beq.w	8003768 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d005      	beq.n	80034e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d130      	bne.n	800354a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800351e:	2201      	movs	r2, #1
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f003 0201 	and.w	r2, r3, #1
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b03      	cmp	r3, #3
 8003554:	d017      	beq.n	8003586 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2203      	movs	r2, #3
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d123      	bne.n	80035da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	08da      	lsrs	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3208      	adds	r2, #8
 800359a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	220f      	movs	r2, #15
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	08da      	lsrs	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3208      	adds	r2, #8
 80035d4:	6939      	ldr	r1, [r7, #16]
 80035d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0203 	and.w	r2, r3, #3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80a6 	beq.w	8003768 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361c:	4b5b      	ldr	r3, [pc, #364]	; (800378c <HAL_GPIO_Init+0x2e4>)
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	4a5a      	ldr	r2, [pc, #360]	; (800378c <HAL_GPIO_Init+0x2e4>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6613      	str	r3, [r2, #96]	; 0x60
 8003628:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_GPIO_Init+0x2e4>)
 800362a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003634:	4a56      	ldr	r2, [pc, #344]	; (8003790 <HAL_GPIO_Init+0x2e8>)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	220f      	movs	r2, #15
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800365e:	d01f      	beq.n	80036a0 <HAL_GPIO_Init+0x1f8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a4c      	ldr	r2, [pc, #304]	; (8003794 <HAL_GPIO_Init+0x2ec>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d019      	beq.n	800369c <HAL_GPIO_Init+0x1f4>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a4b      	ldr	r2, [pc, #300]	; (8003798 <HAL_GPIO_Init+0x2f0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_GPIO_Init+0x1f0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a4a      	ldr	r2, [pc, #296]	; (800379c <HAL_GPIO_Init+0x2f4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00d      	beq.n	8003694 <HAL_GPIO_Init+0x1ec>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a49      	ldr	r2, [pc, #292]	; (80037a0 <HAL_GPIO_Init+0x2f8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <HAL_GPIO_Init+0x1e8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a48      	ldr	r2, [pc, #288]	; (80037a4 <HAL_GPIO_Init+0x2fc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <HAL_GPIO_Init+0x1e4>
 8003688:	2305      	movs	r3, #5
 800368a:	e00a      	b.n	80036a2 <HAL_GPIO_Init+0x1fa>
 800368c:	2306      	movs	r3, #6
 800368e:	e008      	b.n	80036a2 <HAL_GPIO_Init+0x1fa>
 8003690:	2304      	movs	r3, #4
 8003692:	e006      	b.n	80036a2 <HAL_GPIO_Init+0x1fa>
 8003694:	2303      	movs	r3, #3
 8003696:	e004      	b.n	80036a2 <HAL_GPIO_Init+0x1fa>
 8003698:	2302      	movs	r3, #2
 800369a:	e002      	b.n	80036a2 <HAL_GPIO_Init+0x1fa>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_GPIO_Init+0x1fa>
 80036a0:	2300      	movs	r3, #0
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	f002 0203 	and.w	r2, r2, #3
 80036a8:	0092      	lsls	r2, r2, #2
 80036aa:	4093      	lsls	r3, r2
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b2:	4937      	ldr	r1, [pc, #220]	; (8003790 <HAL_GPIO_Init+0x2e8>)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_GPIO_Init+0x300>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036e4:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <HAL_GPIO_Init+0x300>)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_GPIO_Init+0x300>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800370e:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <HAL_GPIO_Init+0x300>)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_GPIO_Init+0x300>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <HAL_GPIO_Init+0x300>)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_GPIO_Init+0x300>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003762:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <HAL_GPIO_Init+0x300>)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3301      	adds	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	f47f ae9d 	bne.w	80034b8 <HAL_GPIO_Init+0x10>
  }
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40021000 	.word	0x40021000
 8003790:	40010000 	.word	0x40010000
 8003794:	48000400 	.word	0x48000400
 8003798:	48000800 	.word	0x48000800
 800379c:	48000c00 	.word	0x48000c00
 80037a0:	48001000 	.word	0x48001000
 80037a4:	48001400 	.word	0x48001400
 80037a8:	40010400 	.word	0x40010400

080037ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037c8:	e002      	b.n	80037d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	43d9      	mvns	r1, r3
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	400b      	ands	r3, r1
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d141      	bne.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382a:	d131      	bne.n	8003890 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003832:	4a46      	ldr	r2, [pc, #280]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800383c:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003844:	4a41      	ldr	r2, [pc, #260]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800384a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2232      	movs	r2, #50	; 0x32
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a3f      	ldr	r2, [pc, #252]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	0c9b      	lsrs	r3, r3, #18
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003862:	e002      	b.n	800386a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3b01      	subs	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003876:	d102      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f2      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800387e:	4b33      	ldr	r3, [pc, #204]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d158      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e057      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003896:	4a2d      	ldr	r2, [pc, #180]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038a0:	e04d      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d141      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038aa:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d131      	bne.n	800391c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038be:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2232      	movs	r2, #50	; 0x32
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	3301      	adds	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ee:	e002      	b.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003902:	d102      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f2      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d112      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e011      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800392c:	e007      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003936:	4a05      	ldr	r2, [pc, #20]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800393c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40007000 	.word	0x40007000
 8003950:	20000000 	.word	0x20000000
 8003954:	431bde83 	.word	0x431bde83

08003958 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003966:	6093      	str	r3, [r2, #8]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40007000 	.word	0x40007000

08003978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e306      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003996:	4b97      	ldr	r3, [pc, #604]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a0:	4b94      	ldr	r3, [pc, #592]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3e>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d002      	beq.n	80039bc <HAL_RCC_OscConfig+0x44>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x108>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d157      	bne.n	8003a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e2e1      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x74>
 80039de:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a84      	ldr	r2, [pc, #528]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4b7f      	ldr	r3, [pc, #508]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7e      	ldr	r2, [pc, #504]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b7c      	ldr	r3, [pc, #496]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7b      	ldr	r2, [pc, #492]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 8003a10:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a77      	ldr	r2, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a74      	ldr	r2, [pc, #464]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fe50 	bl	80016d4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fe4c 	bl	80016d4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e2a6      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fe3c 	bl	80016d4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fe38 	bl	80016d4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e292      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a72:	4b60      	ldr	r3, [pc, #384]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0xe8>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a98:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_OscConfig+0x136>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x13c>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d11f      	bne.n	8003af4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab4:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_OscConfig+0x154>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e265      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	4946      	ldr	r1, [pc, #280]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ae0:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fda9 	bl	800163c <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d043      	beq.n	8003b78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e251      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d023      	beq.n	8003b44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afc:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fde4 	bl	80016d4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fd fde0 	bl	80016d4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e23a      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b22:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	492d      	ldr	r1, [pc, #180]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
 8003b42:	e01a      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fdc0 	bl	80016d4 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fd fdbc 	bl	80016d4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e216      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1e0>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d041      	beq.n	8003c0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fd99 	bl	80016d4 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fd95 	bl	80016d4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1ef      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ef      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x22e>
 8003bc6:	e020      	b.n	8003c0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fd7c 	bl	80016d4 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bde:	e00d      	b.n	8003bfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fd fd78 	bl	80016d4 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d906      	bls.n	8003bfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1d2      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ea      	bne.n	8003be0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a6 	beq.w	8003d64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2b4>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x2b6>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4a7e      	ldr	r2, [pc, #504]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4e:	4b79      	ldr	r3, [pc, #484]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fd fd35 	bl	80016d4 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fd fd31 	bl	80016d4 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e18b      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	4b6c      	ldr	r3, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d108      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x32e>
 8003c94:	4b66      	ldr	r3, [pc, #408]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	4a65      	ldr	r2, [pc, #404]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca4:	e024      	b.n	8003cf0 <HAL_RCC_OscConfig+0x378>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d110      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x358>
 8003cae:	4b60      	ldr	r3, [pc, #384]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	4a5e      	ldr	r2, [pc, #376]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x378>
 8003cd0:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d016      	beq.n	8003d26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fcec 	bl	80016d4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd fce8 	bl	80016d4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e140      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ed      	beq.n	8003d00 <HAL_RCC_OscConfig+0x388>
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fd fcd5 	bl	80016d4 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fd fcd1 	bl	80016d4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e129      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d44:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ed      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03c      	beq.n	8003dea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d78:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd fca4 	bl	80016d4 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d90:	f7fd fca0 	bl	80016d4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0fa      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ef      	beq.n	8003d90 <HAL_RCC_OscConfig+0x418>
 8003db0:	e01b      	b.n	8003dea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db8:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fc87 	bl	80016d4 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dca:	f7fd fc83 	bl	80016d4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0dd      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ef      	bne.n	8003dca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80d1 	beq.w	8003f96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f000 808b 	beq.w	8003f18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d15e      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fd fc5d 	bl	80016d4 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	e00c      	b.n	8003e38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fd fc59 	bl	80016d4 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d905      	bls.n	8003e38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0b3      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ec      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e44:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_RCC_OscConfig+0x62c>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6a11      	ldr	r1, [r2, #32]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e54:	3a01      	subs	r2, #1
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e5e:	0212      	lsls	r2, r2, #8
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e66:	0852      	lsrs	r2, r2, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0552      	lsls	r2, r2, #21
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e72:	0852      	lsrs	r2, r2, #1
 8003e74:	3a01      	subs	r2, #1
 8003e76:	0652      	lsls	r2, r2, #25
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e7e:	06d2      	lsls	r2, r2, #27
 8003e80:	430a      	orrs	r2, r1
 8003e82:	4947      	ldr	r1, [pc, #284]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a44      	ldr	r2, [pc, #272]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a41      	ldr	r2, [pc, #260]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fc18 	bl	80016d4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd fc14 	bl	80016d4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e06e      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x530>
 8003ec6:	e066      	b.n	8003f96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a34      	ldr	r2, [pc, #208]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ee0:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ee6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fbf0 	bl	80016d4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd fbec 	bl	80016d4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e046      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0a:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x580>
 8003f16:	e03e      	b.n	8003f96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e039      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f24:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d12c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	3b01      	subs	r3, #1
 8003f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d123      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11b      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d113      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	3b01      	subs	r3, #1
 8003f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	019f800c 	.word	0x019f800c

08003fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e11e      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b91      	ldr	r3, [pc, #580]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d910      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b8e      	ldr	r3, [pc, #568]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 020f 	bic.w	r2, r3, #15
 8003fd6:	498c      	ldr	r1, [pc, #560]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b8a      	ldr	r3, [pc, #552]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e106      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d073      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d129      	bne.n	8004058 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004004:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0f4      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004014:	f000 f966 	bl	80042e4 <RCC_GetSysClockFreqFromPLLSource>
 8004018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4a7c      	ldr	r2, [pc, #496]	; (8004210 <HAL_RCC_ClockConfig+0x268>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d93f      	bls.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004022:	4b7a      	ldr	r3, [pc, #488]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004036:	2b00      	cmp	r3, #0
 8004038:	d033      	beq.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800403e:	2b00      	cmp	r3, #0
 8004040:	d12f      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004042:	4b72      	ldr	r3, [pc, #456]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	4a70      	ldr	r2, [pc, #448]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 800404c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e024      	b.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d107      	bne.n	8004070 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004060:	4b6a      	ldr	r3, [pc, #424]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0c6      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0be      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004080:	f000 f8ce 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8004084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4a61      	ldr	r2, [pc, #388]	; (8004210 <HAL_RCC_ClockConfig+0x268>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d909      	bls.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004096:	4a5d      	ldr	r2, [pc, #372]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040a2:	4b5a      	ldr	r3, [pc, #360]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4957      	ldr	r1, [pc, #348]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b4:	f7fd fb0e 	bl	80016d4 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fd fb0a 	bl	80016d4 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e095      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	4b4e      	ldr	r3, [pc, #312]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 020c 	and.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d1eb      	bne.n	80040bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d023      	beq.n	8004138 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b43      	ldr	r3, [pc, #268]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a42      	ldr	r2, [pc, #264]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004106:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004114:	4b3d      	ldr	r3, [pc, #244]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800411c:	4a3b      	ldr	r2, [pc, #236]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 800411e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004122:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4936      	ldr	r1, [pc, #216]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
 8004136:	e008      	b.n	800414a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b80      	cmp	r3, #128	; 0x80
 800413c:	d105      	bne.n	800414a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800413e:	4b33      	ldr	r3, [pc, #204]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	4a32      	ldr	r2, [pc, #200]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004148:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d21d      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004158:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 020f 	bic.w	r2, r3, #15
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004168:	f7fd fab4 	bl	80016d4 <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	e00a      	b.n	8004186 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fd fab0 	bl	80016d4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e03b      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d1ed      	bne.n	8004170 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4917      	ldr	r1, [pc, #92]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	490f      	ldr	r1, [pc, #60]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d2:	f000 f825 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	490c      	ldr	r1, [pc, #48]	; (8004214 <HAL_RCC_ClockConfig+0x26c>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x270>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fd fa20 	bl	800163c <HAL_InitTick>
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40022000 	.word	0x40022000
 800420c:	40021000 	.word	0x40021000
 8004210:	04c4b400 	.word	0x04c4b400
 8004214:	08005c80 	.word	0x08005c80
 8004218:	20000000 	.word	0x20000000
 800421c:	20000004 	.word	0x20000004

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004226:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d102      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004232:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e047      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b08      	cmp	r3, #8
 8004242:	d102      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e03e      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800424a:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d136      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	3301      	adds	r3, #1
 800426c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d10c      	bne.n	800428e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800427e:	68d2      	ldr	r2, [r2, #12]
 8004280:	0a12      	lsrs	r2, r2, #8
 8004282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	617b      	str	r3, [r7, #20]
      break;
 800428c:	e00c      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004298:	68d2      	ldr	r2, [r2, #12]
 800429a:	0a12      	lsrs	r2, r2, #8
 800429c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
      break;
 80042a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	0e5b      	lsrs	r3, r3, #25
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	3301      	adds	r3, #1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e001      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042c8:	693b      	ldr	r3, [r7, #16]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	016e3600 	.word	0x016e3600

080042e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ea:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f4:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d10c      	bne.n	8004322 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004308:	4a17      	ldr	r2, [pc, #92]	; (8004368 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	4a14      	ldr	r2, [pc, #80]	; (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004312:	68d2      	ldr	r2, [r2, #12]
 8004314:	0a12      	lsrs	r2, r2, #8
 8004316:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
    break;
 8004320:	e00c      	b.n	800433c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800432c:	68d2      	ldr	r2, [r2, #12]
 800432e:	0a12      	lsrs	r2, r2, #8
 8004330:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
    break;
 800433a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0e5b      	lsrs	r3, r3, #25
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	3301      	adds	r3, #1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004356:	687b      	ldr	r3, [r7, #4]
}
 8004358:	4618      	mov	r0, r3
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40021000 	.word	0x40021000
 8004368:	016e3600 	.word	0x016e3600
 800436c:	00f42400 	.word	0x00f42400

08004370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004378:	2300      	movs	r3, #0
 800437a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800437c:	2300      	movs	r3, #0
 800437e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8098 	beq.w	80044be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004392:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	4b40      	ldr	r3, [pc, #256]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	4a3f      	ldr	r2, [pc, #252]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6593      	str	r3, [r2, #88]	; 0x58
 80043aa:	4b3d      	ldr	r3, [pc, #244]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b6:	2301      	movs	r3, #1
 80043b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ba:	4b3a      	ldr	r3, [pc, #232]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a39      	ldr	r2, [pc, #228]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c6:	f7fd f985 	bl	80016d4 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043cc:	e009      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fd f981 	bl	80016d4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	74fb      	strb	r3, [r7, #19]
        break;
 80043e0:	e005      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043e2:	4b30      	ldr	r3, [pc, #192]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d159      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f4:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01e      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	d019      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004410:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800441c:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fd f941 	bl	80016d4 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004454:	e00b      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fd f93d 	bl	80016d4 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d902      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	74fb      	strb	r3, [r7, #19]
            break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ec      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004498:	e008      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	74bb      	strb	r3, [r7, #18]
 800449e:	e005      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ac:	7c7b      	ldrb	r3, [r7, #17]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b2:	4ba7      	ldr	r3, [pc, #668]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	4aa6      	ldr	r2, [pc, #664]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ca:	4ba1      	ldr	r3, [pc, #644]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f023 0203 	bic.w	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	499d      	ldr	r1, [pc, #628]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044ec:	4b98      	ldr	r3, [pc, #608]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 020c 	bic.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4995      	ldr	r1, [pc, #596]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800450e:	4b90      	ldr	r3, [pc, #576]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	498c      	ldr	r1, [pc, #560]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004530:	4b87      	ldr	r3, [pc, #540]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4984      	ldr	r1, [pc, #528]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004552:	4b7f      	ldr	r3, [pc, #508]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	497b      	ldr	r1, [pc, #492]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004574:	4b76      	ldr	r3, [pc, #472]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	4973      	ldr	r1, [pc, #460]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004596:	4b6e      	ldr	r3, [pc, #440]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	496a      	ldr	r1, [pc, #424]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b8:	4b65      	ldr	r3, [pc, #404]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4962      	ldr	r1, [pc, #392]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045da:	4b5d      	ldr	r3, [pc, #372]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	4959      	ldr	r1, [pc, #356]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045fc:	4b54      	ldr	r3, [pc, #336]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	4951      	ldr	r1, [pc, #324]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800461e:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4948      	ldr	r1, [pc, #288]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4940      	ldr	r1, [pc, #256]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465e:	d105      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004660:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a3a      	ldr	r2, [pc, #232]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	4932      	ldr	r1, [pc, #200]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004696:	d105      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004698:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046b0:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	4924      	ldr	r1, [pc, #144]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ce:	d105      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d015      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	4916      	ldr	r1, [pc, #88]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004706:	d105      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a10      	ldr	r2, [pc, #64]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004712:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d019      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	4908      	ldr	r1, [pc, #32]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473e:	d109      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a02      	ldr	r2, [pc, #8]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474a:	60d3      	str	r3, [r2, #12]
 800474c:	e002      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d015      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	4926      	ldr	r1, [pc, #152]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477e:	d105      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004780:	4b21      	ldr	r3, [pc, #132]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a6:	4918      	ldr	r1, [pc, #96]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d105      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a12      	ldr	r2, [pc, #72]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047d0:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	490a      	ldr	r1, [pc, #40]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e049      	b.n	80048b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fe1a 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fbd2 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e049      	b.n	8004960 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f841 	bl	8004968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f000 fb7b 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x24>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e03c      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d109      	bne.n	80049ba <HAL_TIM_PWM_Start+0x3e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e02f      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x58>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e022      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d109      	bne.n	80049ee <HAL_TIM_PWM_Start+0x72>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e015      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d109      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x8c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e008      	b.n	8004a1a <HAL_TIM_PWM_Start+0x9e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e0a6      	b.n	8004b70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xb6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	e023      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xc6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a40:	e01b      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xd6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a50:	e013      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xe6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a60:	e00b      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xf6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a70:	e003      	b.n	8004a7a <HAL_TIM_PWM_Start+0xfe>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 ff24 	bl	80058d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3a      	ldr	r2, [pc, #232]	; (8004b78 <HAL_TIM_PWM_Start+0x1fc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d018      	beq.n	8004ac4 <HAL_TIM_PWM_Start+0x148>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a39      	ldr	r2, [pc, #228]	; (8004b7c <HAL_TIM_PWM_Start+0x200>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <HAL_TIM_PWM_Start+0x148>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a37      	ldr	r2, [pc, #220]	; (8004b80 <HAL_TIM_PWM_Start+0x204>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00e      	beq.n	8004ac4 <HAL_TIM_PWM_Start+0x148>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a36      	ldr	r2, [pc, #216]	; (8004b84 <HAL_TIM_PWM_Start+0x208>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_TIM_PWM_Start+0x148>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a34      	ldr	r2, [pc, #208]	; (8004b88 <HAL_TIM_PWM_Start+0x20c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_TIM_PWM_Start+0x148>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a33      	ldr	r2, [pc, #204]	; (8004b8c <HAL_TIM_PWM_Start+0x210>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_PWM_Start+0x14c>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <HAL_TIM_PWM_Start+0x14e>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a25      	ldr	r2, [pc, #148]	; (8004b78 <HAL_TIM_PWM_Start+0x1fc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d022      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x1b2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af0:	d01d      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x1b2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <HAL_TIM_PWM_Start+0x214>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d018      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x1b2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <HAL_TIM_PWM_Start+0x218>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x1b2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_TIM_PWM_Start+0x21c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x1b2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <HAL_TIM_PWM_Start+0x200>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x1b2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <HAL_TIM_PWM_Start+0x204>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x1b2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <HAL_TIM_PWM_Start+0x210>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d115      	bne.n	8004b5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <HAL_TIM_PWM_Start+0x220>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b06      	cmp	r3, #6
 8004b3e:	d015      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1f0>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b46:	d011      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b58:	e008      	b.n	8004b6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e000      	b.n	8004b6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800
 8004b8c:	40015000 	.word	0x40015000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	00010007 	.word	0x00010007

08004ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e0ff      	b.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b14      	cmp	r3, #20
 8004bca:	f200 80f0 	bhi.w	8004dae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c29 	.word	0x08004c29
 8004bd8:	08004daf 	.word	0x08004daf
 8004bdc:	08004daf 	.word	0x08004daf
 8004be0:	08004daf 	.word	0x08004daf
 8004be4:	08004c69 	.word	0x08004c69
 8004be8:	08004daf 	.word	0x08004daf
 8004bec:	08004daf 	.word	0x08004daf
 8004bf0:	08004daf 	.word	0x08004daf
 8004bf4:	08004cab 	.word	0x08004cab
 8004bf8:	08004daf 	.word	0x08004daf
 8004bfc:	08004daf 	.word	0x08004daf
 8004c00:	08004daf 	.word	0x08004daf
 8004c04:	08004ceb 	.word	0x08004ceb
 8004c08:	08004daf 	.word	0x08004daf
 8004c0c:	08004daf 	.word	0x08004daf
 8004c10:	08004daf 	.word	0x08004daf
 8004c14:	08004d2d 	.word	0x08004d2d
 8004c18:	08004daf 	.word	0x08004daf
 8004c1c:	08004daf 	.word	0x08004daf
 8004c20:	08004daf 	.word	0x08004daf
 8004c24:	08004d6d 	.word	0x08004d6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fa88 	bl	8005144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0208 	orr.w	r2, r2, #8
 8004c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	619a      	str	r2, [r3, #24]
      break;
 8004c66:	e0a5      	b.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb02 	bl	8005278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	619a      	str	r2, [r3, #24]
      break;
 8004ca8:	e084      	b.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fb75 	bl	80053a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0208 	orr.w	r2, r2, #8
 8004cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0204 	bic.w	r2, r2, #4
 8004cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	61da      	str	r2, [r3, #28]
      break;
 8004ce8:	e064      	b.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fbe7 	bl	80054c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69d9      	ldr	r1, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	021a      	lsls	r2, r3, #8
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	61da      	str	r2, [r3, #28]
      break;
 8004d2a:	e043      	b.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fc5a 	bl	80055ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0204 	bic.w	r2, r2, #4
 8004d56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d6a:	e023      	b.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fca4 	bl	80056c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	021a      	lsls	r2, r3, #8
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004dac:	e002      	b.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
      break;
 8004db2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop

08004dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIM_ConfigClockSource+0x1c>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e0f6      	b.n	8004fd2 <HAL_TIM_ConfigClockSource+0x20a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6f      	ldr	r2, [pc, #444]	; (8004fdc <HAL_TIM_ConfigClockSource+0x214>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	f000 80c1 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e24:	4a6d      	ldr	r2, [pc, #436]	; (8004fdc <HAL_TIM_ConfigClockSource+0x214>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	f200 80c6 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e2c:	4a6c      	ldr	r2, [pc, #432]	; (8004fe0 <HAL_TIM_ConfigClockSource+0x218>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	f000 80b9 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e34:	4a6a      	ldr	r2, [pc, #424]	; (8004fe0 <HAL_TIM_ConfigClockSource+0x218>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	f200 80be 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e3c:	4a69      	ldr	r2, [pc, #420]	; (8004fe4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	f000 80b1 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e44:	4a67      	ldr	r2, [pc, #412]	; (8004fe4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	f200 80b6 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e4c:	4a66      	ldr	r2, [pc, #408]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x220>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	f000 80a9 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e54:	4a64      	ldr	r2, [pc, #400]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x220>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	f200 80ae 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e5c:	4a63      	ldr	r2, [pc, #396]	; (8004fec <HAL_TIM_ConfigClockSource+0x224>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	f000 80a1 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e64:	4a61      	ldr	r2, [pc, #388]	; (8004fec <HAL_TIM_ConfigClockSource+0x224>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	f200 80a6 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e6c:	4a60      	ldr	r2, [pc, #384]	; (8004ff0 <HAL_TIM_ConfigClockSource+0x228>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	f000 8099 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e74:	4a5e      	ldr	r2, [pc, #376]	; (8004ff0 <HAL_TIM_ConfigClockSource+0x228>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	f200 809e 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e80:	f000 8091 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e88:	f200 8096 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e90:	f000 8089 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e98:	f200 808e 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea0:	d03e      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x158>
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	f200 8087 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	f000 8086 	beq.w	8004fbe <HAL_TIM_ConfigClockSource+0x1f6>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d87f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d01a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x12a>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d87b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ec0:	2b60      	cmp	r3, #96	; 0x60
 8004ec2:	d050      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x19e>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d877      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d03c      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x17e>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d873      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d058      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x1be>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d86f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ed8:	2b30      	cmp	r3, #48	; 0x30
 8004eda:	d064      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d86b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d060      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d867      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05c      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d05a      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ef0:	e062      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6899      	ldr	r1, [r3, #8]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f000 fcc5 	bl	8005890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
      break;
 8004f1e:	e04f      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6899      	ldr	r1, [r3, #8]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f000 fcae 	bl	8005890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f42:	609a      	str	r2, [r3, #8]
      break;
 8004f44:	e03c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f000 fc20 	bl	8005798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2150      	movs	r1, #80	; 0x50
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fc79 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8004f64:	e02c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 fc3f 	bl	80057f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2160      	movs	r1, #96	; 0x60
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fc69 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8004f84:	e01c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 fc00 	bl	8005798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fc59 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e00c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f000 fc50 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8004fb6:	e003      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e000      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	00100070 	.word	0x00100070
 8004fe0:	00100060 	.word	0x00100060
 8004fe4:	00100050 	.word	0x00100050
 8004fe8:	00100040 	.word	0x00100040
 8004fec:	00100030 	.word	0x00100030
 8004ff0:	00100020 	.word	0x00100020

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a46      	ldr	r2, [pc, #280]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d017      	beq.n	800503c <TIM_Base_SetConfig+0x48>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d013      	beq.n	800503c <TIM_Base_SetConfig+0x48>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a43      	ldr	r2, [pc, #268]	; (8005124 <TIM_Base_SetConfig+0x130>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <TIM_Base_SetConfig+0x48>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a42      	ldr	r2, [pc, #264]	; (8005128 <TIM_Base_SetConfig+0x134>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_Base_SetConfig+0x48>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a41      	ldr	r2, [pc, #260]	; (800512c <TIM_Base_SetConfig+0x138>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_Base_SetConfig+0x48>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a40      	ldr	r2, [pc, #256]	; (8005130 <TIM_Base_SetConfig+0x13c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0x48>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3f      	ldr	r2, [pc, #252]	; (8005134 <TIM_Base_SetConfig+0x140>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a33      	ldr	r2, [pc, #204]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d023      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505c:	d01f      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a30      	ldr	r2, [pc, #192]	; (8005124 <TIM_Base_SetConfig+0x130>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01b      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <TIM_Base_SetConfig+0x134>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d017      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2e      	ldr	r2, [pc, #184]	; (800512c <TIM_Base_SetConfig+0x138>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <TIM_Base_SetConfig+0x13c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2d      	ldr	r2, [pc, #180]	; (8005138 <TIM_Base_SetConfig+0x144>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00b      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2c      	ldr	r2, [pc, #176]	; (800513c <TIM_Base_SetConfig+0x148>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <TIM_Base_SetConfig+0x14c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_Base_SetConfig+0xaa>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a26      	ldr	r2, [pc, #152]	; (8005134 <TIM_Base_SetConfig+0x140>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <TIM_Base_SetConfig+0x110>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a14      	ldr	r2, [pc, #80]	; (8005130 <TIM_Base_SetConfig+0x13c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00f      	beq.n	8005104 <TIM_Base_SetConfig+0x110>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_Base_SetConfig+0x144>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_Base_SetConfig+0x110>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <TIM_Base_SetConfig+0x148>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_Base_SetConfig+0x110>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <TIM_Base_SetConfig+0x14c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x110>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <TIM_Base_SetConfig+0x140>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d103      	bne.n	800510c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	615a      	str	r2, [r3, #20]
}
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40015000 	.word	0x40015000
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800

08005144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f023 0302 	bic.w	r3, r3, #2
 8005190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a30      	ldr	r2, [pc, #192]	; (8005260 <TIM_OC1_SetConfig+0x11c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <TIM_OC1_SetConfig+0x88>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a2f      	ldr	r2, [pc, #188]	; (8005264 <TIM_OC1_SetConfig+0x120>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00f      	beq.n	80051cc <TIM_OC1_SetConfig+0x88>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a2e      	ldr	r2, [pc, #184]	; (8005268 <TIM_OC1_SetConfig+0x124>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00b      	beq.n	80051cc <TIM_OC1_SetConfig+0x88>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a2d      	ldr	r2, [pc, #180]	; (800526c <TIM_OC1_SetConfig+0x128>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_OC1_SetConfig+0x88>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <TIM_OC1_SetConfig+0x12c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_OC1_SetConfig+0x88>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a2b      	ldr	r2, [pc, #172]	; (8005274 <TIM_OC1_SetConfig+0x130>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10c      	bne.n	80051e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0308 	bic.w	r3, r3, #8
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <TIM_OC1_SetConfig+0x11c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <TIM_OC1_SetConfig+0xd2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <TIM_OC1_SetConfig+0x120>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00f      	beq.n	8005216 <TIM_OC1_SetConfig+0xd2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <TIM_OC1_SetConfig+0x124>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00b      	beq.n	8005216 <TIM_OC1_SetConfig+0xd2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1a      	ldr	r2, [pc, #104]	; (800526c <TIM_OC1_SetConfig+0x128>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <TIM_OC1_SetConfig+0xd2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a19      	ldr	r2, [pc, #100]	; (8005270 <TIM_OC1_SetConfig+0x12c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_OC1_SetConfig+0xd2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <TIM_OC1_SetConfig+0x130>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d111      	bne.n	800523a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800521c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800
 8005274:	40015000 	.word	0x40015000

08005278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f023 0210 	bic.w	r2, r3, #16
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0320 	bic.w	r3, r3, #32
 80052c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <TIM_OC2_SetConfig+0x110>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_OC2_SetConfig+0x74>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <TIM_OC2_SetConfig+0x114>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_OC2_SetConfig+0x74>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <TIM_OC2_SetConfig+0x118>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10d      	bne.n	8005308 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <TIM_OC2_SetConfig+0x110>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <TIM_OC2_SetConfig+0xc0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1e      	ldr	r2, [pc, #120]	; (800538c <TIM_OC2_SetConfig+0x114>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00f      	beq.n	8005338 <TIM_OC2_SetConfig+0xc0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <TIM_OC2_SetConfig+0x11c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00b      	beq.n	8005338 <TIM_OC2_SetConfig+0xc0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <TIM_OC2_SetConfig+0x120>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <TIM_OC2_SetConfig+0xc0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1c      	ldr	r2, [pc, #112]	; (800539c <TIM_OC2_SetConfig+0x124>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC2_SetConfig+0xc0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a17      	ldr	r2, [pc, #92]	; (8005390 <TIM_OC2_SetConfig+0x118>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d113      	bne.n	8005360 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800533e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40015000 	.word	0x40015000
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800

080053a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <TIM_OC3_SetConfig+0x10c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d007      	beq.n	8005412 <TIM_OC3_SetConfig+0x72>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <TIM_OC3_SetConfig+0x110>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC3_SetConfig+0x72>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a29      	ldr	r2, [pc, #164]	; (80054b4 <TIM_OC3_SetConfig+0x114>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10d      	bne.n	800542e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800542c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <TIM_OC3_SetConfig+0x10c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <TIM_OC3_SetConfig+0xbe>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <TIM_OC3_SetConfig+0x110>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00f      	beq.n	800545e <TIM_OC3_SetConfig+0xbe>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <TIM_OC3_SetConfig+0x118>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00b      	beq.n	800545e <TIM_OC3_SetConfig+0xbe>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <TIM_OC3_SetConfig+0x11c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <TIM_OC3_SetConfig+0xbe>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <TIM_OC3_SetConfig+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_OC3_SetConfig+0xbe>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <TIM_OC3_SetConfig+0x114>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d113      	bne.n	8005486 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800546c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	621a      	str	r2, [r3, #32]
}
 80054a0:	bf00      	nop
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40015000 	.word	0x40015000
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <TIM_OC4_SetConfig+0x110>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_OC4_SetConfig+0x74>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <TIM_OC4_SetConfig+0x114>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_OC4_SetConfig+0x74>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <TIM_OC4_SetConfig+0x118>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d10d      	bne.n	8005554 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800553e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005552:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <TIM_OC4_SetConfig+0x110>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <TIM_OC4_SetConfig+0xc0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <TIM_OC4_SetConfig+0x114>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00f      	beq.n	8005584 <TIM_OC4_SetConfig+0xc0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <TIM_OC4_SetConfig+0x11c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00b      	beq.n	8005584 <TIM_OC4_SetConfig+0xc0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <TIM_OC4_SetConfig+0x120>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_OC4_SetConfig+0xc0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <TIM_OC4_SetConfig+0x124>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_OC4_SetConfig+0xc0>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a17      	ldr	r2, [pc, #92]	; (80055dc <TIM_OC4_SetConfig+0x118>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d113      	bne.n	80055ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005592:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	019b      	lsls	r3, r3, #6
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40013400 	.word	0x40013400
 80055dc:	40015000 	.word	0x40015000
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800

080055ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005630:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <TIM_OC5_SetConfig+0xbc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <TIM_OC5_SetConfig+0x82>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a18      	ldr	r2, [pc, #96]	; (80056ac <TIM_OC5_SetConfig+0xc0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00f      	beq.n	800566e <TIM_OC5_SetConfig+0x82>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <TIM_OC5_SetConfig+0xc4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_OC5_SetConfig+0x82>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <TIM_OC5_SetConfig+0xc8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_OC5_SetConfig+0x82>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC5_SetConfig+0xcc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC5_SetConfig+0x82>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a14      	ldr	r2, [pc, #80]	; (80056bc <TIM_OC5_SetConfig+0xd0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d109      	bne.n	8005682 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005674:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800
 80056bc:	40015000 	.word	0x40015000

080056c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	051b      	lsls	r3, r3, #20
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <TIM_OC6_SetConfig+0xc0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <TIM_OC6_SetConfig+0x84>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a19      	ldr	r2, [pc, #100]	; (8005784 <TIM_OC6_SetConfig+0xc4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_OC6_SetConfig+0x84>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <TIM_OC6_SetConfig+0xc8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_OC6_SetConfig+0x84>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <TIM_OC6_SetConfig+0xcc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_OC6_SetConfig+0x84>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a16      	ldr	r2, [pc, #88]	; (8005790 <TIM_OC6_SetConfig+0xd0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC6_SetConfig+0x84>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a15      	ldr	r2, [pc, #84]	; (8005794 <TIM_OC6_SetConfig+0xd4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d109      	bne.n	8005758 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	029b      	lsls	r3, r3, #10
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800
 8005794:	40015000 	.word	0x40015000

08005798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f023 0201 	bic.w	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 030a 	bic.w	r3, r3, #10
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f023 0210 	bic.w	r2, r3, #16
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	031b      	lsls	r3, r3, #12
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005832:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 0307 	orr.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	021a      	lsls	r2, r3, #8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2201      	movs	r2, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e074      	b.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a33      	ldr	r2, [pc, #204]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a31      	ldr	r2, [pc, #196]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d108      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005978:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b4:	d01d      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10c      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40015000 	.word	0x40015000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40014000 	.word	0x40014000

08005a48 <__errno>:
 8005a48:	4b01      	ldr	r3, [pc, #4]	; (8005a50 <__errno+0x8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	2000000c 	.word	0x2000000c

08005a54 <__libc_init_array>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4d0d      	ldr	r5, [pc, #52]	; (8005a8c <__libc_init_array+0x38>)
 8005a58:	4c0d      	ldr	r4, [pc, #52]	; (8005a90 <__libc_init_array+0x3c>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	42a6      	cmp	r6, r4
 8005a62:	d109      	bne.n	8005a78 <__libc_init_array+0x24>
 8005a64:	4d0b      	ldr	r5, [pc, #44]	; (8005a94 <__libc_init_array+0x40>)
 8005a66:	4c0c      	ldr	r4, [pc, #48]	; (8005a98 <__libc_init_array+0x44>)
 8005a68:	f000 f8fe 	bl	8005c68 <_init>
 8005a6c:	1b64      	subs	r4, r4, r5
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	2600      	movs	r6, #0
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	d105      	bne.n	8005a82 <__libc_init_array+0x2e>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7c:	4798      	blx	r3
 8005a7e:	3601      	adds	r6, #1
 8005a80:	e7ee      	b.n	8005a60 <__libc_init_array+0xc>
 8005a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a86:	4798      	blx	r3
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7f2      	b.n	8005a72 <__libc_init_array+0x1e>
 8005a8c:	08005c90 	.word	0x08005c90
 8005a90:	08005c90 	.word	0x08005c90
 8005a94:	08005c90 	.word	0x08005c90
 8005a98:	08005c94 	.word	0x08005c94

08005a9c <memset>:
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <memset+0xa>
 8005aa4:	4770      	bx	lr
 8005aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aaa:	e7f9      	b.n	8005aa0 <memset+0x4>

08005aac <sqrt>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	ed2d 8b02 	vpush	{d8}
 8005ab2:	ec55 4b10 	vmov	r4, r5, d0
 8005ab6:	f000 f825 	bl	8005b04 <__ieee754_sqrt>
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	eeb0 8a40 	vmov.f32	s16, s0
 8005ac6:	eef0 8a60 	vmov.f32	s17, s1
 8005aca:	f7fa fffb 	bl	8000ac4 <__aeabi_dcmpun>
 8005ace:	b990      	cbnz	r0, 8005af6 <sqrt+0x4a>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f7fa ffcc 	bl	8000a74 <__aeabi_dcmplt>
 8005adc:	b158      	cbz	r0, 8005af6 <sqrt+0x4a>
 8005ade:	f7ff ffb3 	bl	8005a48 <__errno>
 8005ae2:	2321      	movs	r3, #33	; 0x21
 8005ae4:	6003      	str	r3, [r0, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	f7fa fe79 	bl	80007e4 <__aeabi_ddiv>
 8005af2:	ec41 0b18 	vmov	d8, r0, r1
 8005af6:	eeb0 0a48 	vmov.f32	s0, s16
 8005afa:	eef0 0a68 	vmov.f32	s1, s17
 8005afe:	ecbd 8b02 	vpop	{d8}
 8005b02:	bd38      	pop	{r3, r4, r5, pc}

08005b04 <__ieee754_sqrt>:
 8005b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	ec55 4b10 	vmov	r4, r5, d0
 8005b0c:	4e55      	ldr	r6, [pc, #340]	; (8005c64 <__ieee754_sqrt+0x160>)
 8005b0e:	43ae      	bics	r6, r5
 8005b10:	ee10 0a10 	vmov	r0, s0
 8005b14:	ee10 3a10 	vmov	r3, s0
 8005b18:	462a      	mov	r2, r5
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	d110      	bne.n	8005b40 <__ieee754_sqrt+0x3c>
 8005b1e:	ee10 2a10 	vmov	r2, s0
 8005b22:	462b      	mov	r3, r5
 8005b24:	f7fa fd34 	bl	8000590 <__aeabi_dmul>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7fa fb78 	bl	8000224 <__adddf3>
 8005b34:	4604      	mov	r4, r0
 8005b36:	460d      	mov	r5, r1
 8005b38:	ec45 4b10 	vmov	d0, r4, r5
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	2d00      	cmp	r5, #0
 8005b42:	dc10      	bgt.n	8005b66 <__ieee754_sqrt+0x62>
 8005b44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b48:	4330      	orrs	r0, r6
 8005b4a:	d0f5      	beq.n	8005b38 <__ieee754_sqrt+0x34>
 8005b4c:	b15d      	cbz	r5, 8005b66 <__ieee754_sqrt+0x62>
 8005b4e:	ee10 2a10 	vmov	r2, s0
 8005b52:	462b      	mov	r3, r5
 8005b54:	ee10 0a10 	vmov	r0, s0
 8005b58:	f7fa fb62 	bl	8000220 <__aeabi_dsub>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	f7fa fe40 	bl	80007e4 <__aeabi_ddiv>
 8005b64:	e7e6      	b.n	8005b34 <__ieee754_sqrt+0x30>
 8005b66:	1512      	asrs	r2, r2, #20
 8005b68:	d074      	beq.n	8005c54 <__ieee754_sqrt+0x150>
 8005b6a:	07d4      	lsls	r4, r2, #31
 8005b6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005b70:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005b78:	bf5e      	ittt	pl
 8005b7a:	0fda      	lsrpl	r2, r3, #31
 8005b7c:	005b      	lslpl	r3, r3, #1
 8005b7e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005b82:	2400      	movs	r4, #0
 8005b84:	0fda      	lsrs	r2, r3, #31
 8005b86:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005b8a:	107f      	asrs	r7, r7, #1
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	2516      	movs	r5, #22
 8005b90:	4620      	mov	r0, r4
 8005b92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b96:	1886      	adds	r6, r0, r2
 8005b98:	428e      	cmp	r6, r1
 8005b9a:	bfde      	ittt	le
 8005b9c:	1b89      	suble	r1, r1, r6
 8005b9e:	18b0      	addle	r0, r6, r2
 8005ba0:	18a4      	addle	r4, r4, r2
 8005ba2:	0049      	lsls	r1, r1, #1
 8005ba4:	3d01      	subs	r5, #1
 8005ba6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005baa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005bae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bb2:	d1f0      	bne.n	8005b96 <__ieee754_sqrt+0x92>
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	f04f 0e20 	mov.w	lr, #32
 8005bba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005bbe:	4281      	cmp	r1, r0
 8005bc0:	eb06 0c05 	add.w	ip, r6, r5
 8005bc4:	dc02      	bgt.n	8005bcc <__ieee754_sqrt+0xc8>
 8005bc6:	d113      	bne.n	8005bf0 <__ieee754_sqrt+0xec>
 8005bc8:	459c      	cmp	ip, r3
 8005bca:	d811      	bhi.n	8005bf0 <__ieee754_sqrt+0xec>
 8005bcc:	f1bc 0f00 	cmp.w	ip, #0
 8005bd0:	eb0c 0506 	add.w	r5, ip, r6
 8005bd4:	da43      	bge.n	8005c5e <__ieee754_sqrt+0x15a>
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	db41      	blt.n	8005c5e <__ieee754_sqrt+0x15a>
 8005bda:	f100 0801 	add.w	r8, r0, #1
 8005bde:	1a09      	subs	r1, r1, r0
 8005be0:	459c      	cmp	ip, r3
 8005be2:	bf88      	it	hi
 8005be4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005be8:	eba3 030c 	sub.w	r3, r3, ip
 8005bec:	4432      	add	r2, r6
 8005bee:	4640      	mov	r0, r8
 8005bf0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005bf4:	f1be 0e01 	subs.w	lr, lr, #1
 8005bf8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005c04:	d1db      	bne.n	8005bbe <__ieee754_sqrt+0xba>
 8005c06:	430b      	orrs	r3, r1
 8005c08:	d006      	beq.n	8005c18 <__ieee754_sqrt+0x114>
 8005c0a:	1c50      	adds	r0, r2, #1
 8005c0c:	bf13      	iteet	ne
 8005c0e:	3201      	addne	r2, #1
 8005c10:	3401      	addeq	r4, #1
 8005c12:	4672      	moveq	r2, lr
 8005c14:	f022 0201 	bicne.w	r2, r2, #1
 8005c18:	1063      	asrs	r3, r4, #1
 8005c1a:	0852      	lsrs	r2, r2, #1
 8005c1c:	07e1      	lsls	r1, r4, #31
 8005c1e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005c22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005c26:	bf48      	it	mi
 8005c28:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005c2c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005c30:	4614      	mov	r4, r2
 8005c32:	e781      	b.n	8005b38 <__ieee754_sqrt+0x34>
 8005c34:	0ad9      	lsrs	r1, r3, #11
 8005c36:	3815      	subs	r0, #21
 8005c38:	055b      	lsls	r3, r3, #21
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	d0fa      	beq.n	8005c34 <__ieee754_sqrt+0x130>
 8005c3e:	02cd      	lsls	r5, r1, #11
 8005c40:	d50a      	bpl.n	8005c58 <__ieee754_sqrt+0x154>
 8005c42:	f1c2 0420 	rsb	r4, r2, #32
 8005c46:	fa23 f404 	lsr.w	r4, r3, r4
 8005c4a:	1e55      	subs	r5, r2, #1
 8005c4c:	4093      	lsls	r3, r2
 8005c4e:	4321      	orrs	r1, r4
 8005c50:	1b42      	subs	r2, r0, r5
 8005c52:	e78a      	b.n	8005b6a <__ieee754_sqrt+0x66>
 8005c54:	4610      	mov	r0, r2
 8005c56:	e7f0      	b.n	8005c3a <__ieee754_sqrt+0x136>
 8005c58:	0049      	lsls	r1, r1, #1
 8005c5a:	3201      	adds	r2, #1
 8005c5c:	e7ef      	b.n	8005c3e <__ieee754_sqrt+0x13a>
 8005c5e:	4680      	mov	r8, r0
 8005c60:	e7bd      	b.n	8005bde <__ieee754_sqrt+0xda>
 8005c62:	bf00      	nop
 8005c64:	7ff00000 	.word	0x7ff00000

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
